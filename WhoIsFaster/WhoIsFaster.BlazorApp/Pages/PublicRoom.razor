@page "/room"
@attribute [Authorize(Roles = "User")]

@if (Room == null)
{
    <p><em>Loading...</em></p>
}else{

    <h1>
    @((DateTime.Now - Room.TimeLastPlayerJoined).TotalSeconds);
    </h1>
        <h1>START</h1>
        <h3>Results: </h3>
        for (int i = 0; i < Room.RoomPlayers.Count(); i++)
        {
            <div class="progress" style="background-color: #222222; margin-bottom: 10px;">
                <div class="progress-bar progress-bar-striped @addBGColor(i) progress-bar-animated" role="progressbar" style="width: @(Math.Round(((float)(Room.RoomPlayers.ElementAt(i).CurrentTextIndex)/Room.Text.TextContent.Trim().Length),2)*100)%" aria-valuenow="@(Math.Round(((float)(Room.RoomPlayers.ElementAt(i).CurrentTextIndex)/Room.Text.TextContent.Trim().Length),2)*100)" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        }
        <h3 style="text-align: center; padding-top: 2%;">Type as fast as you can: </h3>
        @* <p class="text-break" style="text-align: center; font-size: 20px;">mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm</p> *@
        <div class="container">
            <span style="background-color: #32CD32">@(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)])</span><span style="background-color: #FFCCCB">@((IncorrectWordIndex > CorrectWordIndex) ? Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..(Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? Room.Text.TextContent.Length : CurrentTextIndex + IncorrectWordIndex)] : "")</span>@((IncorrectWordIndex > CorrectWordIndex ) ? Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? "" : Room.Text.TextContent[(CurrentTextIndex + IncorrectWordIndex)..] : Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..])
        </div>
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text" id="">Type here</span>
            </div>
            <input disabled="@(!Room.HasStarted || Room.HasFinished || EndOfText)" type="text" class="form-control" @bind-value="Input" @oninput="@((e) => { Input=(string)e.Value; OnInput(); })" >
        </div>
    
    @* <div class="progress" style="background-color: #222222; margin-bottom: 10px;">
        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100">Player1</div>
    </div>
    <div class="progress" style="background-color: #222222; margin-bottom: 10px;">
        <div class="progress-bar progress-bar-striped bg-success progress-bar-animated" role="progressbar" style="width: 25%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">Player2</div>
    </div>
    <div class="progress" style="background-color: #222222; margin-bottom: 10px;">
        <div class="progress-bar progress-bar-striped bg-warning progress-bar-animated" role="progressbar" style="width: 75%" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">Player3</div>
    </div>
    <div class="progress" style="background-color: #222222; margin-bottom: 10px;">
        <div class="progress-bar progress-bar-striped bg-danger progress-bar-animated" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">Player4</div>
    </div> *@
}

@* @if (Room == null)
{
    <p><em>Loading...</em></p>
}
else{
    <h1>Typing test</h1>
    @if (Room.IsStarting && !Room.HasStarted)
    {
    <h1>
    @((DateTime.Now - Room.TimeLastPlayerJoined).TotalSeconds);
    </h1>
    }
    else { 
        <h1>TYPE!!!!!</h1>
    }
<div class="container">
    <span style="background-color: #32CD32">@(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)])</span><span style="background-color: #FFCCCB">@((IncorrectWordIndex > CorrectWordIndex) ? Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..(Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? Room.Text.TextContent.Length : CurrentTextIndex + IncorrectWordIndex)] : "")</span>@((IncorrectWordIndex > CorrectWordIndex ) ? Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? "" : Room.Text.TextContent[(CurrentTextIndex + IncorrectWordIndex)..] : Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..])
</div>
    <hr>
    <div class="container">
        <input disabled="@(!Room.HasStarted || Room.HasFinished || EndOfText)" class="form-control" @bind-value="Input" @oninput="@((e) => { Input=(string)e.Value; OnInput(); })" />
    </div>

    <input type="button" id="startRoom" value="Start" class="btn btn-primary" @onclick="@StartRoom" />

    } *@
