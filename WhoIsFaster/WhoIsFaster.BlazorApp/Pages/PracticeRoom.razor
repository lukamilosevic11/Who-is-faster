@page "/practice"
@attribute [Authorize(Roles = "User")]
@using Blazored.Toast.Configuration

@if (Room == null)
{
    <div class="row">
        <p><em>Loading...</em></p>
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only"></span>
        </div>
    </div>
}
else
{
    <div class="container" style="margin-bottom: 50px;">
        <div class="row">
            <div class="col-7">
                <h3 class="text-primary">live results: </h3>
            </div>
            @if (Room.HasStarted)
            {
                <div class="col-1 text-primary">
                    WPM @RoomPlayer.WordsPerMinute
                </div>
                <div class="col-4">
                    
                        @if (EndingRoomPercentageReverse() >= 1 && EndingRoomPercentageReverse() <= 30)
                        {
                            <p class="text-primary" style="font-size: 20px;">
                                Game duration:
                                <span class="blinking" style="font-size: 20px;">@(EndingRoomSecondsReverse())s</span>
                            </p>
                            <div class="progress" style="height: 2px; background-color: #222222;">
                                <div class="progress-bar bg-danger" role="progressbar" style="width:@(EndingRoomPercentageReverse())%;" aria-valuenow="@(EndingRoomPercentageReverse())" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                        else
                        {
                            <p class="text-primary" style="font-size: 20px;">
                                Game duration:
                                <span>@(EndingRoomSecondsReverse() == -0 ? 0 : EndingRoomSecondsReverse())s</span>
                            </p>
                            <div class="progress" style="height: 2px; background-color: #222222;">
                                <div class="progress-bar" role="progressbar" style="width:@(EndingRoomPercentageReverse())%;" aria-valuenow="@(EndingRoomPercentageReverse())" aria-valuemin="0" aria-valuemax="100"></div>
                            </div>
                        }
                </div>
            }
        </div>
    </div>

    @if (ShowToastForOnePlayer && !Room.IsStarting && !Room.HasStarted)
    {

        ToastService.ShowInfo("Please click start button for starting pracice!", "Who Is Faster");

        ShowToastForOnePlayer = false;

    }
    @if (Room.IsStarting && !Room.HasStarted)
    {
        ChangeDurationOfToast = 1;
        if (ShowToastForStartingGame)
        {
            ToastService.ShowWarning(Room.LengthOfStarting + "", "Prepare to type for...");
        }
        ShowToastForStartingGame = false;

        for (double i = Room.LengthOfStarting - 1; i >= 0; i--)
        {
            var time = (Room.LengthOfStarting + (StartClicked - DateTime.Now).TotalSeconds);
            if (i == Math.Round(time, 1) && i != 0)
                ToastService.ShowWarning((Room.LengthOfStarting + Math.Round((StartClicked - DateTime.Now).TotalSeconds)) + "", "Prepare to type for...");
            if (i == 0 && Math.Round(time, 1) == 0)
            {
                ChangeDurationOfToast = 3;
                ToastService.ShowSuccess("Type As Fast As You Can!!", "Start");
            }
        }


    }

    <div class="container" style="margin-bottom: 20px;">
        <div class="progress" style="background-color: #222222;">
            <div class="progress-bar progress-bar-striped bg-danger progress-bar-animated" role="progressbar" style="width: @((int)(Math.Round(((float)(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)].Length)/Room.Text.TextContent.Trim().Length),2)*100))%; font-size: 20px;" aria-valuemin="0" aria-valuenow="@((int)(Math.Round(((float)(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)].Length)/Room.Text.TextContent.Trim().Length),2)*100))" aria-valuemax="100">
                @(RoomPlayer.UserName +" "+ (int)(((float)(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)].Length)/Room.Text.TextContent.Trim().Length)*100)+"%")
            </div>
        </div>
    </div>

    @if (Room.HasStarted)
    {
        <div class="container" style="margin-bottom:20px; margin-top:20px;">
            <p class="text-break" style="text-align: justify; font-size: 20px;">
                <span class="text-success">@(Room.Text.TextContent[..(CurrentTextIndex+CorrectWordIndex)])</span><span class="text-danger">@((IncorrectWordIndex > CorrectWordIndex) ? Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..(Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? Room.Text.TextContent.Length : CurrentTextIndex + IncorrectWordIndex)] : "")</span>@((IncorrectWordIndex > CorrectWordIndex ) ? Room.Text.TextContent.Length < CurrentTextIndex + IncorrectWordIndex ? "" : Room.Text.TextContent[(CurrentTextIndex + IncorrectWordIndex)..] : Room.Text.TextContent[(CurrentTextIndex + CorrectWordIndex)..])
            </p>
        </div> }
    else
    {
        <div class="container" style="margin-bottom: 50px;">
            <div class="alert alert-primary" role="alert">
                <strong>Info!</strong> Text will be available when the game starts!
            </div>
        </div>}
    <div class="container" style="margin-top: 30px;">
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text" id="">Type here</span>
            </div>
            <input disabled="@(!Room.HasStarted || Room.HasFinished || EndOfText || RoomPlayer.IsDone)" type="text" class="form-control" @bind-value="Input" @oninput="@((e) => { Input=(string)e.Value; OnInput(); })">
        </div>
        @if (!Room.HasStarted || !Room.IsStarting)
        {
            <button disabled="@(DisableStartButton)" style="margin-top: 30px;" type="button" class="btn btn-success" @onclick="@StartRoom">START</button>}
    </div>
}

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="@ChangeDurationOfToast"
                IconType="IconType.FontAwesome"
                InfoIcon="fa fa-hourglass-start"
                SuccessIcon="fa fa-keyboard-o"
                SuccessClass="success-toast-override"
                WarningIcon="fa fa-rocket"
                WarningClass="warning-toast-override"
                ErrorIcon="fa fa-bug"
                RemoveToastsOnNavigation="true" />